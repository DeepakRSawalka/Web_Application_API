name: Build ami on aws

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  test_and_build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      DBHOST: "localhost"
      PORT: 5000
      DBUSER: ${{ secrets.DB_USER }}
      DBPASS: ${{ secrets.DB_PASS }}
      DATABASE: "app_db"
      DBPORT: 5433
      CSV_PATH: "../users.csv"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASS }}
          POSTGRES_DB: "app_db"
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    outputs:
      ami_id: ${{ steps.parse_ami_id.outputs.ami_id }}

    steps:
      - name: Github code checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.11.5"    

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run pytest
        run: pytest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CUSTOM_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CUSTOM_DEV_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create a zip folder
        run: zip -r webapp.zip . -x ".git/*" ".gitignore" ".github/*"

      - name: Packer Init
        run: packer init packer-debian.pkr.hcl || exit 1
        working-directory: packer

      - name: Validate Packer Template
        run: packer validate packer-debian.pkr.hcl || (echo "Packer template validation failed!" && exit 1)
        working-directory: packer

      - name: Build AMI
        if: success()
        run: packer build -color=false -on-error=abort -var-file=dev.auto.pkrvars.hcl packer-debian.pkr.hcl | tee build.log
        working-directory: packer
        env:
          PACKER_LOG: 1

      - name: Parse AMI ID
        id: parse_ami_id
        working-directory: packer
        run: |
          AMI=$(grep 'us-east-1: ami-' build.log | cut -d: -f2 | xargs)
          echo "ami_id=$AMI" >> "$GITHUB_OUTPUT"

      - name: Output AMI_ID
        env:
          AMI_ID: ${{ steps.parse_ami_id.outputs.ami_id }}
        run: |
          echo $AMI_ID
  
  dev:
    needs: test_and_build
    runs-on: ubuntu-latest
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      AMI_ID: ${{ needs.test_and_build.outputs.ami_id }}
      
    steps:
      - name: Create Dev launch template version
        run: |
          aws ec2 create-launch-template-version --launch-template-name csye6225_launchTemplate --source-version 1 --launch-template-data '{"ImageId":"'"$AMI_ID"'"}' --debug

      - name: Update ASG to use the latest launch template version
        run: |
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name csye6225_launchTemplate --query "LaunchTemplateVersions[0].VersionNumber" --output text)
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name webapp_asg --launch-template "LaunchTemplateName=csye6225_launchTemplate,Version=$LATEST_VERSION"

      - name: Start instance refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name webapp_asg

      - name: Wait for instance refresh to complete
        run: |
          REFRESH_ID=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name webapp_asg --query "InstanceRefreshes[0].InstanceRefreshId" --output text)
          STATUS="Pending"
          while [[ "$STATUS" == "Pending" || "$STATUS" == "InProgress" ]]; do
            echo "Waiting for instance refresh to complete"
            sleep 60
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name webapp_asg --instance-refresh-ids $REFRESH_ID --query "InstanceRefreshes[0].Status" --output text)
            echo "Current status: $STATUS"
          done

          if [ "$STATUS" == "Successful" ]; then
            echo "Instance Refresh completed successfully."
            break
          elif [ "$STATUS" == "Cancelled" ] || [ "$STATUS" == "Failed" ]; then
            echo "Instance Refresh failed or was cancelled."
            exit 1
          else
              echo "Waiting for Instance Refresh to complete."
              sleep 30  # Adjust the sleep interval as needed
          fi

  prod:
    needs: test_and_build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      AMI_ID: ${{ needs.test_and_build.outputs.ami_id }}
    
    steps:
      - name: Create Prod launch template version
        run: |
          aws ec2 create-launch-template-version --launch-template-name csye6225_launchTemplate --source-version 1 --launch-template-data '{"ImageId":"'"$AMI_ID"'"}' --debug

      - name: Update ASG to use the latest launch template version
        run: |
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name csye6225_launchTemplate --query "LaunchTemplateVersions[0].VersionNumber" --output text)
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name webapp_asg --launch-template "LaunchTemplateName=csye6225_launchTemplate,Version=$LATEST_VERSION"

      - name: Start instance refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name webapp_asg

      - name: Wait for instance refresh to complete
        run: |
          REFRESH_ID=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name webapp_asg --query "InstanceRefreshes[0].InstanceRefreshId" --output text)
          STATUS="Pending"
          while [[ "$STATUS" == "Pending" || "$STATUS" == "InProgress" ]]; do
            echo "Waiting for instance refresh to complete"
            sleep 60
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name webapp_asg --instance-refresh-ids $REFRESH_ID --query "InstanceRefreshes[0].Status" --output text)
            echo "Current status: $STATUS"
          done

          if [ "$STATUS" == "Successful" ]; then
            echo "Instance Refresh completed successfully."
            break
          elif [ "$STATUS" == "Cancelled" ] || [ "$STATUS" == "Failed" ]; then
            echo "Instance Refresh failed or was cancelled."
            exit 1
          else
              echo "Waiting for Instance Refresh to complete."
              sleep 30  # Adjust the sleep interval as needed
          fi

  